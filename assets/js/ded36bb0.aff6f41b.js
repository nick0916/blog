"use strict";(self.webpackChunknick_blog=self.webpackChunknick_blog||[]).push([[733],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4847:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={sidebar_position:1,title:"\u57fa\u672c\u6280\u5de7"},s=void 0,p={unversionedId:"Python/basic",id:"Python/basic",title:"\u57fa\u672c\u6280\u5de7",description:"\u5b9a\u7fa9Type",source:"@site/docs/Python/basic.md",sourceDirName:"Python",slug:"/Python/basic",permalink:"/docs/Python/basic",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/Python/basic.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"\u57fa\u672c\u6280\u5de7"},sidebar:"tutorialSidebar",previous:{title:"Linux \u6307\u4ee4",permalink:"/docs/linux_command"},next:{title:"\u6e2c\u8a66 - pytest",permalink:"/docs/Python/pytest"}},c={},u=[{value:"\u5b9a\u7fa9Type",id:"\u5b9a\u7fa9type",level:2},{value:"Poetry \u7248\u672c\u63a7\u5236\u8edf\u9ad4",id:"poetry-\u7248\u672c\u63a7\u5236\u8edf\u9ad4",level:2},{value:"Python <code>is</code> and <code>==</code> difference",id:"python-is-and--difference",level:2},{value:"Python variable scope",id:"python-variable-scope",level:2},{value:"Pydantic: \u8cc7\u6599\u578b\u614b\u9a57\u8b49\u5de5\u5177",id:"pydantic-\u8cc7\u6599\u578b\u614b\u9a57\u8b49\u5de5\u5177",level:2},{value:"PAMI",id:"pami",level:2},{value:"\u57fa\u790e\u77e5\u8b58",id:"\u57fa\u790e\u77e5\u8b58",level:2},{value:"\u8a2d\u8a08\u6a21\u5f0f",id:"\u8a2d\u8a08\u6a21\u5f0f",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"\u5b9a\u7fa9type"},"\u5b9a\u7fa9Type"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5b9a\u7fa9\u56de\u50b3\u662fVector")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"Vector = list[float]\n\ndef scale(scalar: float, vector: Vector) -> Vector:\n    return [scalar * num for num in vector]\n\n# typechecks; a list of floats qualifies as a Vector.\nnew_vector = scale(2.0, [1.0, -4.2, 5.4])\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5b9a\u7fa9\u56de\u50b3\u662f ",(0,i.kt)("inlineCode",{parentName:"li"},"none"),",  \u50b3\u5165\u503c\u662fcomposite\u7684\u683c\u5f0f")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# Type aliases are useful for simplifying complex type signatures. For example:\n\nfrom collections.abc import Sequence\n\nConnectionOptions = dict[str, str]\nAddress = tuple[str, int]\nServer = tuple[Address, ConnectionOptions]\n\ndef broadcast_message(message: str, servers: Sequence[Server]) -> None:\n    ...\n\n# The static type checker will treat the previous type signature as\n# being exactly equivalent to this one.\ndef broadcast_message(\n        message: str,\n        servers: Sequence[tuple[tuple[str, int], dict[str, str]]]) -> None:\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5b9a\u7fa9 new type")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from typing import NewType\n\nUserId = NewType('UserId', int)\nsome_id = UserId(524313)\n")),(0,i.kt)("h2",{id:"poetry-\u7248\u672c\u63a7\u5236\u8edf\u9ad4"},"Poetry \u7248\u672c\u63a7\u5236\u8edf\u9ad4"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u53ef\u4ee5\u770b\u51fa\u4e3b\u8981main package\u6709\u54ea\u4e9b, \u66f4\u597d\u505a\u7248\u672c\u63a7\u5236")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"export requirements.txt")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"poetry export -f requirements.txt --output requirements.txt --without-hashes\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u770b\u51fapackage \u4f9d\u8cf4")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"poetry show -t\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"activate venv")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"source \"$( poetry env list --full-path | grep Activated | cut -d' ' -f1 )/bin/activate\"\n")),(0,i.kt)("h2",{id:"python-is-and--difference"},"Python ",(0,i.kt)("inlineCode",{parentName:"h2"},"is")," and ",(0,i.kt)("inlineCode",{parentName:"h2"},"==")," difference"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"is")," \u6bd4\u8f03\u4f4d\u7f6e"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"==")," \u6bd4\u8f03\u503c")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# python3 code to\n# illustrate the\n# difference between\n# == and is operator\n# [] is an empty list\nlist1 = []\nlist2 = []\nlist3=list1\n \nif (list1 == list2):\n    print("True")\nelse:\n    print("False")\n \nif (list1 is list2):\n    print("True")\nelse:\n    print("False")\n \nif (list1 is list3):\n    print("True")\nelse:   \n    print("False")\n \nlist3 = list3 + list2\n \nif (list1 is list3):\n    print("True")\nelse:   \n    print("False")\n\n# Output:\n\n# True\n# False\n# True\n# False\n')),(0,i.kt)("h2",{id:"python-variable-scope"},"Python variable scope"),(0,i.kt)("p",null,"Variable set outside\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"__init__"),"\xa0belong to the class. They're shared by all instances."),(0,i.kt)("p",null,"Variables created inside\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"__init__"),"\xa0(and all other method functions) and prefaced with\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"self."),"\xa0belong to the object instance."),(0,i.kt)("h2",{id:"pydantic-\u8cc7\u6599\u578b\u614b\u9a57\u8b49\u5de5\u5177"},"Pydantic: \u8cc7\u6599\u578b\u614b\u9a57\u8b49\u5de5\u5177"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Kludex/awesome-pydantic"},"https://github.com/Kludex/awesome-pydantic")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://python.plainenglish.io/an-introduction-to-the-pydantic-stack-9e490d606c8d"},"Rise of the Pydantic Stack"))),(0,i.kt)("h2",{id:"pami"},"PAMI"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"https://towardsdatascience.com/hello-i-am-pami-937439c7984d"},"Hello! I am PAMI"))),(0,i.kt)("li",{parentName:"ul"},"A new Pattern Mining Python library for Data Science")),(0,i.kt)("h2",{id:"\u57fa\u790e\u77e5\u8b58"},"\u57fa\u790e\u77e5\u8b58"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUyMjU5ODM1Mg==&action=getalbum&album_id=2176450482389434369&scene=173&from_msgid=2247492657&from_itemidx=1&count=3&nolastread=1#wechat_redirect"},"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUyMjU5ODM1Mg==&action=getalbum&album_id=2176450482389434369&scene=173&from_msgid=2247492657&from_itemidx=1&count=3&nolastread=1#wechat_redirect")),(0,i.kt)("h2",{id:"\u8a2d\u8a08\u6a21\u5f0f"},"\u8a2d\u8a08\u6a21\u5f0f"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.csdn.net/libing_thinking/category_5841427.html"},"\u8a2d\u8a08\u6a21\u5f0f"))))}m.isMDXComponent=!0}}]);